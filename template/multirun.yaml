hydra:
  run:
    dir: .
  sweep:
    dir: .
    subdir: .
  hydra_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][HYDRA] %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
    root:
      level: INFO
      handlers:
      - console
    loggers:
      logging_example:
        level: DEBUG
    disable_existing_loggers: true
  job_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        formatter: simple
        filename: ${hydra.job.name}.log
    root:
      level: INFO
      handlers:
      - console
      - file
    disable_existing_loggers: true
  sweeper:
    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    max_batch_size: null
  launcher:
    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
  help:
    app_name: ${hydra.job.name}
    header: '${hydra.help.app_name} is powered by Hydra.

      '
    footer: 'Powered by Hydra (https://hydra.cc)

      Use --hydra-help to view Hydra specific help

      '
    template: '${hydra.help.header}

      == Configuration groups ==

      Compose your configuration from those groups (group=option)


      $APP_CONFIG_GROUPS


      == Config ==

      Override anything in the config (foo.bar=value)


      $CONFIG


      ${hydra.help.footer}

      '
  hydra_help:
    hydra_help: ???
    template: 'Hydra (${hydra.runtime.version})

      See https://hydra.cc for more info.


      == Flags ==

      $FLAGS_HELP


      == Configuration groups ==

      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
      to command line)


      $HYDRA_CONFIG_GROUPS


      Use ''--cfg hydra'' to Show the Hydra config.

      '
  output_subdir: null
  overrides:
    hydra: []
    task:
    - launcher.cmd=main.py
    - trainer.b_size=500,1000
    - system.seed.torch=1,2,3
  job:
    name: launcher
    override_dirname: launcher.cmd=main.py,system.seed.torch=1,2,3,trainer.b_size=500,1000
    id: ???
    num: ???
    config_name: config.yaml
    env_set: {}
    env_copy: []
    config:
      override_dirname:
        kv_sep: '='
        item_sep: ','
        exclude_keys: []
  runtime:
    version: 1.0.6
    cwd: /Users/MichaelArbel/Documents/Gatsby/Research/projects/mlexp/test_mlexp
  verbose: false
logs:
  log_dir: data
  log_name: logs
  log_to_file: true
  log_id: -1
metrics:
  disp_freq: 3
  checkpoint_freq: 11
model:
  model: linear
  model_path: null
data:
  dataset_type: images
  dataset: cifar10
trainer:
  trainer_type: default
  train_mode: both
  optimizer:
    optimizer: Adam
    beta_1: 0.5
    beta_2: 0.999
    lr: 1.0e-05
    weight_decay: 0.0
  scheduler:
    use_scheduler: true
    scheduler: ExponentialLR
    scheduler_gamma: 0.8
    lr_decay: 0.8
  total_epochs: 100
  b_size: 1000
  total_iter: 150000
system:
  device: -2
  seed:
    torch: 0
    numpy: 0
  dtype: 32
  num_workers: 1
  slurm_id: ''
  dataparallel: false
  experimentalist: true
  hostname: ''
  process_id: -1
  date: ''
  time: ''
cluster:
  user: ${env:USER}
  engine: OAR
  shell:
    bin_path: /usr/bin/zsh
    config_path: ~/.zshrc
  directive: '#OAR'
  cleanup: source gpu_setVisibleDevices.sh
  cmd: oarsub -S
  launchers: default
  conda_env: ${env:CONDA_DEFAULT_ENV}
launcher:
  name: default
  filename: ${launcher.name}.sh
  hours: 12
  gpumodel: null
  gpumem: null
  besteffort: false
  idempotent: false
  cmd: main.py
